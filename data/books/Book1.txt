Программа — список команд, то есть инструкций для компьютера: отобразить что-нибудь на экране,
вычислить что-нибудь.


Команды для интерпретатора можно писать в обычном текстовом редакторе (например, в «Блокноте»). Но чаще для этого
пользуются специальной программой, которая называется средой разработки.


При оформлении программ мы будем пользоваться PEP 8 — Python Enhanced Proposal. Это документ, описывающий общепринятый
(рекомендуемый) стиль написания программ на языке Python. Документ создан по рекомендациям Гвидо Ван Россума и Барри
 Уорсо, ознакомиться с материалами на русском языке можно, например, тут. В наших материалах мы будем отмечать рекомендации PEP 8 таким блоком.


Команда print() - выводит на экран то что находиться в круглых скобочках:
	print('Privet')
	в данном случае программа выведет Privet
ВАЖНО! После print и перед () не ставить пробелы также если хотите напечатать 2 или более элемента ставите запятую и
после нее пробел например так: print('Privet', 'drugalek')


Переменные имя переменной должно отражать ее назначение и может состоять из латинских букв, цифр и символа
подчеркивания. Имя не может начинаться с цифры. Значение переменной — то, что сохраняет в себе переменная.
Сохранять какие-либо данные в переменную можно вот так:
	name = 'Петя'
	second_name = 'Пупкин'


Команда input() позволяет пользователь ввести какие-либо данные с клавиатуры например число 4 или строку
"Да здравствует дружба", также мы можем присвоить переменной данные которые мы введем, выглядеть это будет так:
	stroka = input()
С этой строкой мы уже можем работать, например вывести ее:
	print(stroka)



Условный оператор - Условный оператор используется, когда некая часть программы должна быть выполнена, только если
верно какое-либо условие. Для записи условного оператора используются ключевые слова if и else («если», «иначе»),
двоеточие и отступ в четыре пробела(1 табуляция). Выглядит он примерно так:
	if (условие):
	    действие если условие верно
	else:
	    действие в случае если условие неверно

Также можно написать вот такое условие:
	if условие:
	    сделать что-то
	elif условие:
	    сделать что-то если условие в еlif верно
	else:
	    сделать что-то в случае если оба условия выше не верны
Вот пример программы:
	print('напиши цифру от 1 до 2')
	a = input()
	if a == '1':
	    print('Это цифра 1')
	elif a == '2':
	    print('Это цифра 2')
	else:
	    print('Я пока не знаю других чисел')
Обратите, внимание что = - это опреатор присваивания, а == - оператор сравнения и он также выделяется пробелами
с двух сторон.



Сложное условие. Логические операции.
Чтобы задать одновременное выполнение двух условий, используем and («и»), если достаточно выполнения одного из двух
вариантов (или обоих сразу) — используем or («или»), а если нужно убрать какой-то вариант — not («не»).
Приоритет выполнения операций:
1. not
2. and
3. or
Вот примеры сложных условий:
	print('Как называются первая и последняя буквы русского алфавита?')
	rus_letter_1 = input()
	rus_letter_2 = input()
	if greek_letter_1 == 'А' and greek_letter_2 == 'Я':
    	    print('Верно.')
	else:
    	    print('Неверно.')
Рассмотрим еще один пример:

print('Введите любые два слова, но это не должны быть "белый" и "медведь" разом.')
	word1 = input()
	word2 = input()
	if not (word1 == 'белый' and word2 == 'медведь'):
    	    print('Верно.')
	else:
    	    print('Неверно.')



Вложенные условия
В команде if при выполнении условия можно выполнять более одной команды. Для этого все их необходимо выделить отступом.
Такая запись называется блоком кода. По отступам интерпретатор определяет, при выполнении каких условий какие команды
исполнять. Аналогично можно делать и для команды else.

Вот пример задачи с вложенным условием:
	print('Перед вами развилка. Вы можете пойти направо, налево или прямо.')
	put1 = input()
	if put1 not in ('налево', 'направо', 'прямо'):
    	    print('Так нельзя выбери 1 из 3 вариантов')
	elif put1 == 'налево':
    	    print('Ты упал на подушку пердушку и опозорился')
	elif put1 == 'прямо':
    	   print('Ты не смог справиться с трудными препятствиями на пути и упал в воду')
	elif put1 == 'направо':
    	    print('Ты спокойно прошел по красивой дорожке и видишь следующую развилку думая о двух путях:
    	    направо или налево')
            put2 = input()
    	    if put2 not in ('налево', 'направо'):
                print('Выбери нормальный путь')
    	    if put2 == 'направо':
                print('Ты вышел на волейбольное поле и наконец забил решающий гол(хорошая концовка)')
    	    elif put2 == 'налево':
                print('Тебя сел бегемот(плохая концовка)')

Операции над строками.
Давайте попробуем:

	x = '10'
	y = '20'
	z = x + y
	print(z)
Результатом выполнения программы будет строка 1020, т.к мы сложили две строки(строка выделяется двумя кавычками или
1 черточкой с двух сторон: "школа" == 'школа'. Разницы особой нет, но если строка будет более сложная с различными
символами, скобочками, или одинарной черточкой то лучше использовать вот такие кавычки"")

Есть также и другие типы данных например int - целое число, float - число со знаками после запятой например 4.00000, 5.13123.
в приведенном выше примере мы сложили 2 строки и просто получили 1ую строку, соединенную со 2ой.
ВАЖНО!!! Складывать можно только одинаковые виды данных.
Также можно менять тип данных при возможности например строку "3" можно преобразовать в целое число. Сделать это можно
вот так:
	stroka = '3'
	chislo = int(stroka)
Так мы получили строку stroka в которой записано, что 3 это строка, а во второй переменной мы эту строку преобразовали
в целое число, также мы можем строку 3 перевести в float и наоборот.
Еще мы можем умножать строки на какое-нибудь intовское число например:
	print('hello' * 3)
мы получим вот такой текст: hellohellohello



Команда in
Команда in

Команда in позволяет проверить, что одна строка находится внутри другой.
Например: строка «на» находится внутри строки «сложная задача».
В таком случае обычно говорят, что одна строка является подстрокой для другой.
	text = input()
	if 'хорош' in text and 'плох' not in text:
            print('Текст имеет положительную эмоциональную окраску.')
	elif 'плох' in text and 'хорош' not in text:
    	    print('Текст имеет отрицательную эмоциональную окраску.')
	else:
    	    print('Текст имеет нейтральную или смешанную эмоциональную окраску.')

Первое условие окажется истинным, например, для строк «все хорошо» и «какой хороший день», но не для «ВсЕ ХоРоШо» и не
для «что-то хорошо, а что-то и плохо». Аналогично второе условие окажется истинным для строк «все плохо», «плохое настроение» и т. д.


Операции над числами:
\ - деление
\\ - получение целой части от деления
% - получение остатка от деления
+ - сумма
- - разность
* - умножение
** - воззведение в степень
Также есть некоторые функции например summ(a, b) - она суммирует 2 числа(a, b)
Итак, приоритет выполнения операций в Python от высшего (выполняется первой) до низшего:
Возведение в степень (**).
Унарный минус (-). Используется для получения, например, противоположного числа.
Умножение, деление (* /, %, //).
Сложение и вычитание (+ -).
Операции сравнения (<=, <, >, >=).
Операции равенства (==, !=).
Логические операции (not, and, or).
Операции присваивания (=, +=, -=, *= и т. д.)

Простейшие функции
len() - длинна строки, например len('world') - вернет intовое число равное количеству СИМВОЛОВ в троке, в данном
случае 5 символов


Обмен значениями переменных
В Pythone можно переменным присваивать данные других переменных, например:
	a = 5
	b = 6
	c = 4
	a = b(тут значение переменной а сбросится и приравняется к переменной b, т.е к 6)
Также в питоне можно поменять значения переменных между собой 2 способами:
1. через 3 переменную, например:
	a = 5
	b = 1
	c = 0
	c = b
	b = a
	a = c
2. через вот такой синтаксис:
	a = 5
	b = 1
	a, b = b, a
