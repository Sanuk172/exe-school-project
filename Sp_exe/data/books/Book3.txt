Множества
Множества в Python - это неупорядоченные коллекции уникальных элементов. Они используются для хранения и манипулирования
наборами данных, чтобы упростить выполнение операций. При выводе множества на экран, каждый раз все его элементы будут выводиться в разной последовательности.
Чтобы создать пустое множество вы должны написать: имя множества = set()
Для непустого множества: имя множества = {элемент, элемент, и т.д.}

Базовые методы множества в Python(остальные методы множества можно посмотреть написав set().(метод):

len(список): Возвращает количество элементов во множестве.
список.add(то-что мы хотим добавить): Возвращает новое множество, содержащее элементы первого и второго множества.
список.sub(2 список): Возвращает элементы первого множества, которые не содержатся во втором множестве (разность множеств).
список.and(2 список): Логическое “И”, возвращает элементы, которые содержатся в обоих множествах.

Итак, у множеств есть три ключевые особенности:

Порядок элементов в множестве не определен
Элементы множеств — строки и/или числа
Множество не может содержать одинаковых элементов



Индексация
Индексирование в Python - это процесс получения элемента из коллекции (например, списка, словаря или строки) по его индексу.

Списки в Python индексируются, начиная с 0. Это означает, что первый элемент списка имеет индекс 0, второй - 1 и так далее.
Чтобы получить элемент списка, нужно указать его индекс в квадратных скобках после имени списка:

	a = [1, 2, 3, 4, 5]
	print(a[0]) # Выведет 1

Если попытаться обратиться к элементу с индексом, превышающим длину списка, возникнет исключение IndexError.
Индекс -1 означает что это первый символ с конца т.е -2 это предпоследний символ и т.д.
Индексирование может быть как позиционным (по номеру элемента), так и “обратным” (отсчет начинается с конца списка).
Для этого используются отрицательные индексы: чем меньше число после знака минус, тем дальше элемент находится от конца списка:

Выведет последний элемент списка
	print(a[-1])

Выведет элемент перед последним
	print(a[-2])

Также можно использовать произвольные смещения, задавая их после двоеточия:
	print(a)
Выведет элементы с индексами 2 и 3
Также можно выводить элементы с шагом делается это вот так:
	print(a[::1])
Выведет элементы списка, а через 1


Список
Список в Python - это структура данных, которая позволяет хранить коллекцию значений. Он работает как упорядоченная
коллекция, в которой каждый элемент имеет свой индекс (начинается с 0).

Вот как выглядит создание списка в Python:

	numbers = [1, 2, 3, 4, 5]
	print(numbers[0])  # Выведет 1
	print(len(numbers))  # Выведет количество элементов в списке, то есть 5

Вы можете добавлять, удалять и изменять элементы списка, а также выполнять различные операции над ними. Например:

	numbers[0] = 10  # Заменим первый элемент на 10
	del numbers[4]  # Удалим последний элемент
	numbers.append(6)  # Добавим элемент в конец списка
	numbers.insert(1, 7)  # Вставим элемент на позицию с индексом 1 (то есть после 2)

Списки являются изменяемыми, то есть вы можете изменять их элементы напрямую:
	numbers[1] = numbers[1] + 1  # Увеличим второй элемент на 1

append() - добавляет элемент в конец списка.
extend() - расширяет список, добавляя в него другой список.
insert() - вставляет элемент на указанную позицию.
remove() - удаляет первый найденный элемент с указанным значением.
pop() - удаляет и возвращает последний элемент, если аргумент не передан, либо элемент по указанному индексу и сдвигает
все последующие элементы влево.
sort() - сортирует элементы списка.
reverse() - меняет порядок элементов на обратный.


Кортеж
Кортеж в Python - это упорядоченная неизменяемая коллекция значений, которая является одним из видов данных типа tuple.
Кортежи используются в тех случаях, когда нужно создать набор данных, устойчивый к изменениям, и при этом сохранить порядок элементов.

Кортежи создаются с помощью круглых скобок, в которых через запятую перечисляются элементы. Вот как это выглядит:

	tup = ('apple', 'ball', 'cat')
	print(tup[0])  # Выводит 'apple'
	print(type(tup))  # Печатает <class 'tuple'>

Кортежи являются неизменяемыми, то есть после создания их нельзя изменить. Однако можно создать новый кортеж с измененными
значениями:

	another_tuple = tup + ('dog')
	print(another_tuple)  # Выводит ('apple', 'ball', 'cat', 'dog')

Также можно создавать пустые кортежи:

	empty_tuple = ()
	print(empty_tuple)  # Ничего не выводит


Словарь
Словарь в Python (он же map или ассоц. массив) - это неупорядоченная коллекция данных с доступом по ключу.
Ключ - это уникальный идентификатор для каждого значения в словаре. Словари представляют собой удобный способ хранения
связанных друг с другом данных, где ключом может выступать любая хэшируемая последовательность, а значение - произвольный объект.

Создание словаря:

	my_dict = {'key1':'value1', 'key2':'value2'}
	print(my_dict['key1'])  # Выведет value1

Словари являются изменяемой структурой данных, поэтому можно добавлять, изменять или удалять элементы:

	my_dict['new_key'] = 'new_value'
	del my_dict['key2']

Кроме того, в Python есть встроенные типы словарей:

– dict() - создает словарь.
– {key: value} - создает словарь из пар ключ-значение.

Вот некоторые методы словаря в Python:

clear(): Очищает словарь, удаляя все ключи и значения.
copy(): Возвращает копию словаря.
fromkeys(): Создает словарь со значениями по умолчанию для каждого ключа.
get(): Получает значение по указанному ключу, если ключ не найден, возвращает значение по умолчанию.
items(): Возвращает список кортежей (ключ, значение) для всех пар ключ-значение в словаре.
keys(): Возвращает список ключей в словаре.
pop(): Удаляет указанный ключ из словаря и возвращает соответствующее значение. Если ключ не существует, вызывает
исключение KeyError.
popitem(): Удаляет и возвращает произвольный элемент из словаря. Если словарь пуст, вызывает исключение KeyError.
setdefault(): Возвращает значение по указанному ключу. Если ключ отсутствует, добавляет его со значением по умолчанию
и возвращает значение по умолчанию.
update(): Обновляет словарь, заменяя существующие ключи новыми значениями.