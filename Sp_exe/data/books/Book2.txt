Цикл while

Оператор while («пока») тоже проверяет условие и тоже, в случае его истинности, выполняет следующий блок кода
(тело цикла). Однако после выполнения этого блока кода выполняется не то, что идет после него, а снова проверяется
условие, записанное после while.
Синтаксис:
	while условие:
    	    блок кода (тело цикла)


Составной оператор присваивания:
чтобы изменить переменную a на число b вы вероятнее всего напишете вот так: 
	a = a + b
Но это так же можно написать как:
	a += b
Также это и работает с другими операторами(*, -, \ и т.д.)


Сигнал остановки
Рассмотрим такую задачу: пользователь вводит числа. Пусть это будут цены на купленные в магазине товары, а наша
программа — часть программного обеспечения кассового аппарата. Ввод "−1" — сигнал остановки. Нужно сосчитать сумму
всех введенных чисел (сумму чека).
Поскольку требуется повторить нечто (ввод очередной цены) неизвестное количество раз, потребуется цикл while. Нам
понадобится как минимум две переменные: price для цены очередного товара и total — для общей суммы. Если бы мы знали
точно, что пользователю надо купить ровно три товара, цикл (и ввод −1 как условие его прерывания) был бы не нужен.
Тогда программа могла бы выглядеть так:
	total = 0
	price = float(input())
	total = total + price 
	price = float(input())
	total = total + price 
	price = float(input())
	total = total + price
	print('Сумма введённых чисел равна', total)

но так как у нас есть цикл мы можем написать вот такую программу:count = 0
	total = 0
	while count < 3:
    	    price = float(input())
    	    total = total + price
    	    count += 1
	print('Сумма введённых чисел равна', total)


Подсчет количества элементов, удовлетворяющих условию
Допустим ты будешь вводить целые числа, когда ты напишешь число 0. Тебе надо определить, сколько чисел среди введенных
оканчивались на 2 или были кратны числу 4. Теперь тебе надо проверять последовательность чисел, и для каждого числа
выполнять проверку, соответствует ли оно условию или нет. В конце программы надо вывести количество чисел которые прошли
условие. Программа выглядит вот так:
	
	count = 0
	number = int(input())
	while number != 0:
    	    if number % 10 == 2 and number % 4 == 0:
                count += 1
    	        number = int(input())
	print('Количество искомых чисел:', count)


Именованные аргументы функции print
sep - символ, который будет ставиться между аргументами(по умолчанию пробел)
end — то, что выводится после вывода всех аргументов (по умолчанию символ начала новой строки).
Пример:
	print('Раз', 'два', 'три', sep='--')
Выведет "Раз--два--три"
Не используйте пробелы вокруг знака =, если он используется для обозначения именованного аргумента.


Цикл for в Python используется для итерации по каждому элементу в коллекции. Это может быть список, кортеж, строка,
словарь или любая другая итерируемая коллекция.(Что такое кортежи, списки, словари вы узнаете позже)
Синтаксис:

	for item in iterable:
    	    # код, который будет выполняться для каждого элемента iterable

В этом коде item - это переменная, которая принимает значение каждого элемента из объекта iterable. Объект может быть
списком, строкой, кортежем или любым другим итерируемым объектом.

Вот пример простого цикла for:

	fruits = ['яблоко', 'банан', 'груша', 'киви'](список)

	for fruit in fruits:
    	    print(fruit)

В этом примере мы перебираем каждый элемент в списке fruits и выводим его на экран.

Цикл for также может использоваться со строками для перебора каждого символа в строке:

	word = 'привет'
	for letter in word:
    	    print(letter)

Также цикл for в Python имеет встроенный инструмент range(), который используется для создания итерируемого объекта.
Этот объект определяет начальное значение, конечное значение (которое не включается в результат) и шаг изменения значения.

Пример:

	for _ in range(5):
	    print("Привет")

В данном примере мы создаем итерируемый объект с начальным значением 0, конечным значением 4 и шагом 1. В результате
цикл выполнится 5 раз (от 0 до 4), при этом значение счетчика будет изменяться на 1 каждый раз.

Если мы хотим изменить начальное значение или шаг, мы можем передать дополнительные параметры в функцию range:

	for _ in range(2, 10, 3):
	   print("Привет") 

Здесь мы начинаем с числа 2, идем до числа 9 (исключая его) с шагом 3. Цикл выполнится 3 раза: с числами 2, 5 и 8.

Еще один пример - использование цикла for вместе с функцией range() для создания списка чисел от 1 до 10:

	for i in range(1, 11):
	    print(i)

Этот код создаст следующий вывод:

1
2
…
9
10

Обратите внимание, что функция range() создает “виртуальный” список, поэтому она не создает список в памяти. Вместо
этого она создает элементы списка по мере необходимости. Это очень эффективно для больших списков, так как не требует много памяти.

В программах, решающих абстрактные, математические задачи, допустимо называть переменные короткими и непонятными именами
типа n или i. Однако этого лучше избегать. Кроме того, стоит соблюдать общепринятые договоренности: буквой n обычно
обозначают количество чего-либо (например, итераций цикла). При этом если есть хоть какая-то определенность (например,
речь идет о количестве автомобилей), то стоит и переменную назвать более понятно (например, cars). Буквами i и j (по-русски
они традиционно читаются как «и» и «жи») обычно обозначают итераторы цикла for.



True, False и break и continue
Булевы значения True и False используются в Python для обозначения истины или лжи в логических выражениях. Они могут
принимать только два значения - True (истина) и False (ложь).

Рассмотрим простой пример:

	x = 5
	if x == 4:
	    print("x равно 4")  
	else:
	    print("x не равно 4")

В данном случае выражение x == 4 вернет False, поэтому будет выведено “x не равно 4”.

Функции break и continue используются для управления выполнением циклов.

Например:

while True:
	x = int(input("Введите x: "))  
	if x == 42:  
    	    break  
    print("x не равно 42")  

В этом случае цикл будет выполняться до тех пор, пока пользователь не введет значение 42. Как только это произойдет,
функция break прервет выполнение цикла.

Функция continue в Python пропускает текущую итерацию цикла и переходит к следующей. Это может быть полезно, например,
когда нужно обработать не все элементы итерации, а только некоторые.

Простейший пример использования continue:

	for item in items:
	    if item == 'special_item':
	        continue
	    process_item(item)


Вложенные циклы в Python используются для повторения блоков кода несколько раз. Это делается путем вложения одного
цикла внутрь другого. Ниже приведен пример вложенных циклов на Python:

	for i in range(10):
	    for j in range(5):
	        print(i * j)

В этом коде внутренний цикл for повторяется 5 раз для каждого значения переменной i. В результате этот код выведет
таблицу умножения до 10x4.

Оператор break и continue во вложенных циклах
Пример использования оператора break для досрочного прерывания вложенного цикла:

	while True:
	    n = input("Введите число: ")
	    if n == 'stop':
	        break
	    s = int(n)
	    result = 0
	    while True:
	        m = input("Введите еще число: ")
	        if m == 'stop':
	            break
	        result += int(m)
	    print("Сумма чисел", result)

Этот код запрашивает у пользователя два числа, складывает их и выводит результат. Если пользователь вводит ‘stop’,
то соответствующий цикл прерывается. Если же пользователь вводит ‘stop’ во вложенном цикле, то прерывается только он,
а внешний продолжает работу.

Допустим, у вас есть две последовательности чисел и вам нужно выбрать из каждой те числа, которые больше определенного
порога. Для этого можно использовать вложенный цикл с оператором continue:

	low_numbers = [2, 4, 6, 8]
	high_numbers = [10, 12, 14, 16]
	threshold = 10
	for number in low_numbers:
	    if number > threshold:
	        print(number)
	        continue
	for number in high_numbers:
	    if number > threshold:
	        print(number)

В этом примере внешний цикл перебирает числа из первой последовательности, а внутренний – числа из второй. Если число
из первой последовательности больше порога, оно выводится на экран с помощью первого оператора print и выполнение
переходит к следующему числу из этой последовательности с помощью continue. Если все числа из первой последовательность
меньше порога, начинается выполнение второго цикла, и на экран выводятся числа из второй последовательности.